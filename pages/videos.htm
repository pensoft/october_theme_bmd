url = "/resources/videos"
layout = "default"
title = "Videos"
is_hidden = 0
robot_index = "index"
robot_follow = "follow"

[builderList mediaVideosList]
modelClass = "pensoft\Media\Models\Videos"
scope = "-"
scopeValue = "{{ :scope }}"
displayColumn = "name"
noRecordsMessage = "No records found"
detailsPage = "-"
detailsUrlParameter = "id"
pageNumber = "{{ :page }}"

[jumbotron]
jumbotron = "under-construction"
title = 1
background = "transperant"
templates = "template1"
description_limit = 0
==
<?php
use Pensoft\Media\Models\Videos;
use Pensoft\Media\Models\VideosCategory;
use System\Models\File;

function onStart(){
	$this['mediaVideosList'] =  Videos::where('pensoft_media_videos.parent_id', null)->get();
    $this['videoCategories'] = VideosCategory::orderBy('name', 'asc')->get();

    if(get('download')) {
        $file = File::find((int)get('download'));
        $file_name = $file->getLocalPath();
        $recordName = get('file_name') ? get('file_name') : 'OBSGESSION_video';
        $ext= $file->getExtension();

        if (file_exists($file_name)) {
            header('Content-Description: File Transfer');
            header('Content-Type: application/octet-stream');
            header("Content-Type: application/force-download");
            header('Content-Disposition: attachment; filename='.$recordName .'.'. $ext);
            header('Content-Transfer-Encoding: binary');
            header('Expires: 0');
            header('Cache-Control: must-revalidate, post-check=0, pre-check=0');
            header('Pragma: public');
            header('Content-Length: ' . filesize($file_name));
            ob_clean();
            flush();
            readfile($file_name);
            exit();
        }

        return Redirect::to('/videos');
    }
}


function onDownloadFile(){
    $file = File::find(post('id'));
    $pathToFile = $file->getLocalPath();
    $fileName = $file->file_name;
    $fileType = $file->content_type;
    $headers = [
        'HTTP/1.1 200 OK',
        'Pragma: public',
        'Content-Type: '.$fileType,
        'Content-Type: application/force-download'
    ];

    return Response::download($pathToFile, $fileName, $headers);
}

function onFilterVideos(){
    $categoryIds = post('categories', []);
    
    // Base query
    $query = Videos::where('pensoft_media_videos.parent_id', null);
    
    // If categories are selected and not "all", filter by categories
    if (!empty($categoryIds) && !in_array('all', $categoryIds)) {
        $query->whereIn('category_id', $categoryIds);
    }
    
    $videos = $query->get();
    
    return [
        'html' => $this->renderPartial('components/video-list', ['records' => $videos])
    ];
}
?>
==

{% set records = mediaVideosList %}

<section class="container-fluid resources-page videos-page">
    <div class="container">
        <div class="row">
            <div class="col-md-3 col-xs-12">
                {% partial 'components/resources-navigation' %}
                {% partial 'components/categories' 
                    defaultOption='All videos'
                    categoriesTitle='Categories'
                    categoriesList=videoCategories 
                %}
            </div>
            <div class="col-md-9 col-xs-12">
                <div id="video-container">
                    {% partial 'components/video-list' records=records %}
                </div>
            </div>
        </div>        
    </div>
</section>